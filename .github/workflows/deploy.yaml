name: nylabank-service

on:
  push:
    branches: [main]

# Add permissions needed for OIDC
permissions:
  id-token: write
  contents: write
  security-events: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 bandit safety pytest pytest-asyncio pytest-cov

      - name: Code Quality - Black Formatting Check
        run: |
          black --check --diff app/ tests/

      # - name: Code Quality - Flake8 Linting
      #   run: |
      #     flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Security Scanning - Bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -f txt -o bandit-report.txt || true

      - name: Security Scanning - Safety (Dependency Vulnerabilities)
        run: |
          safety check --json --output safety-report.json || true
          safety check --text --output safety-report.txt || true

      - name: Run Unit Tests with Coverage
        run: |
          pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            bandit-report.txt
            safety-report.json
            safety-report.txt

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: run-tests
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      AWS_REGION: us-west-1
      EKS_CLUSTER_NAME: maoney-shared
      ECR_REPOSITORY_NAME_PROD: nylabankservice-prod

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::170673730974:role/github-actions-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create Prod ECR repo if necessary
        id: ecr-repo-prod
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: byu-oit/github-action-create-ecr-repo-if-missing@v1
        with:
          DOCKER_REPO_NAME: ${{ env.ECR_REPOSITORY_NAME_PROD }}

      - name: Automatic Tagging of Releases
        uses: rymndhng/release-on-push-action@v0.25.0
        id: tag-release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          bump_version_scheme: patch
          release_body: "Official release at ${{ steps.tag-release.outputs.tag_name }}"

      - name: Print Semver Version
        run: |
          echo ${{ steps.tag-release.outputs.tag_name }}

      - name: Get Current Date
        id: current-date
        run: |
          time=$(date +'%T')
          echo "::set-output name=date::$(date +'%m-%d-%Y')-${time//:/-}"

      - name: Build and Tag Prod Image
        id: build-prod-image
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_URI: ${{ env.ECR_REPOSITORY_NAME_PROD  }}
          IMAGE_TAG: ${{ steps.tag-release.outputs.tag_name }}
        run: |
          # Build a docker container and Tag
          docker build -f Dockerfile \
          -t $ECR_REGISTRY/$ECR_URI:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_URI:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_URI:$IMAGE_TAG"

      - name: Setup kubeconfig
        id: setup-kubeconfig
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Install kubectl
        id: install-kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl
          chmod +x kubectl
          mkdir -p ~/.local/bin
          mv ./kubectl ~/.local/bin/kubectl
          kubectl version --client

      - name: Deploy NylaBank Service Production
        id: deploy-k8s-prod-yaml
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_NAME: ${{ steps.build-prod-image.outputs.image }}
          NAMESPACE: maoney-prod
          ENVIRONMENT: prod
        run: |
          curl -s -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v5.4.2/kustomize_5.4.2_linux_amd64
          chmod u+x ./kustomize
          chmod +x deploy.sh
          ./deploy.sh $ENVIRONMENT $IMAGE_NAME $NAMESPACE

      - name: Wait for service ingress to propagate
        uses: jakejarvis/wait-action@v0.1.1
        with:
          time: "10s"

      - name: Run Healthchecks
        id: service-healthcheck
        env:
          NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'maoney-prod' || 'maoney-staging' }}
        run: |
          pod_logs=$(kubectl get po -l app=nylabankservice -n $NAMESPACE -o jsonpath='{.items[0].metadata.name}')
          kubectl logs po/$pod_logs -n $NAMESPACE
          STATUS=$(kubectl get pods -l=app='nylabankservice' -n $NAMESPACE -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
          echo $STATUS
          for item in $STATUS
          do
            if [ $item == "True" ]
            then
              echo "Service is UP ðŸŽ‰!!!"
            else
              echo "Service is DOWN ðŸ™ƒ"
              exit 1
            fi
          done
